"""add_subscription_trial_fields

Revision ID: ad47e836f826
Revises: 33b23b51a89f
Create Date: 2025-05-16 18:56:59.383053

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ad47e836f826'
down_revision: Union[str, None] = '33b23b51a89f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_password_resets_id', table_name='password_resets')
    op.drop_index('ix_password_resets_token', table_name='password_resets')
    op.drop_table('password_resets')
    op.drop_index('ix_support_ticket_logs_id', table_name='support_ticket_logs')
    op.drop_table('support_ticket_logs')
    op.drop_index('ix_token_refresh_attempts_id', table_name='token_refresh_attempts')
    op.drop_table('token_refresh_attempts')
    op.drop_index('ix_token_service_status_id', table_name='token_service_status')
    op.drop_index('ix_token_service_status_timestamp', table_name='token_service_status')
    op.drop_table('token_service_status')
    op.alter_column('promo_codes', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=True)
    op.alter_column('promo_codes', 'current_uses',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.alter_column('promo_codes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               nullable=True)
    op.alter_column('promo_codes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               nullable=True)
    op.drop_constraint('promo_codes_code_key', 'promo_codes', type_='unique')
    op.add_column('subscriptions', sa.Column('is_legacy_free', sa.Boolean(), nullable=True))
    op.add_column('subscriptions', sa.Column('trial_ends_at', sa.DateTime(), nullable=True))
    op.add_column('subscriptions', sa.Column('is_in_trial', sa.Boolean(), nullable=True))
    op.add_column('subscriptions', sa.Column('trial_converted', sa.Boolean(), nullable=True))
    op.alter_column('subscriptions', 'is_lifetime',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('subscriptions', 'connected_accounts_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('subscriptions', 'active_webhooks_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('subscriptions', 'active_strategies_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('subscriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('subscriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('subscriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('subscriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('subscriptions', 'active_strategies_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('subscriptions', 'active_webhooks_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('subscriptions', 'connected_accounts_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('subscriptions', 'is_lifetime',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.drop_column('subscriptions', 'trial_converted')
    op.drop_column('subscriptions', 'is_in_trial')
    op.drop_column('subscriptions', 'trial_ends_at')
    op.drop_column('subscriptions', 'is_legacy_free')
    op.create_unique_constraint('promo_codes_code_key', 'promo_codes', ['code'])
    op.alter_column('promo_codes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('promo_codes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('promo_codes', 'current_uses',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.alter_column('promo_codes', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               nullable=False)
    op.create_table('token_service_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('active_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expired_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refresh_success_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refresh_fail_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('urgent_queue_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('soon_queue_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('normal_queue_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cpu_usage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('memory_usage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='token_service_status_pkey')
    )
    op.create_index('ix_token_service_status_timestamp', 'token_service_status', ['timestamp'], unique=False)
    op.create_index('ix_token_service_status_id', 'token_service_status', ['id'], unique=False)
    op.create_table('token_refresh_attempts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('credential_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attempted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_tier', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('refresh_method', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['credential_id'], ['broker_credentials.id'], name='token_refresh_attempts_credential_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='token_refresh_attempts_pkey')
    )
    op.create_index('ix_token_refresh_attempts_id', 'token_refresh_attempts', ['id'], unique=False)
    op.create_table('support_ticket_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('issue_type', postgresql.ENUM('BUG', 'FEATURE', 'QUESTION', 'ACCOUNT', name='issuetype'), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hubspot_ticket_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='support_ticket_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='support_ticket_logs_pkey')
    )
    op.create_index('ix_support_ticket_logs_id', 'support_ticket_logs', ['id'], unique=False)
    op.create_table('password_resets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='password_resets_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='password_resets_pkey')
    )
    op.create_index('ix_password_resets_token', 'password_resets', ['token'], unique=True)
    op.create_index('ix_password_resets_id', 'password_resets', ['id'], unique=False)
    # ### end Alembic commands ###
